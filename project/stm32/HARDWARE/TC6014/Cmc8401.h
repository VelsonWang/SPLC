///////////////////////////////////////////////////////////////////////////////////////////
//
//							  Cmc8401 PCI运动控制卡函数库
//
//						     深圳市微芯集成电路设计有限公司
//								 www.cmosic.com   2014
//
///////////////////////////////////////////////////////////////////////////////////////////


// 
#ifndef _Cmc8401_LIB_H
#define _Cmc8401_LIB_H

#define __stdcall

//
#ifndef TRUE
#define TRUE  1
#endif

#ifndef FALSE
#define FALSE 0
#endif

/* Define NULL pointer value */
#ifndef NULL
#ifdef  __cplusplus
#define NULL    0
#else
#define NULL    ((void *)0)
#endif
#endif

typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;

/************************************************************************/
/*                           初始化函数                                  */
/************************************************************************/

// ****************************************************************************************
// 函  数：分配系统资源，初始化控制卡
// 参  数：无
// 返回值：-1-未正确安装驱动程序；0-没有卡；>0-安装卡的数量
// ****************************************************************************************
int __stdcall c8401_board_initial(void);


// ****************************************************************************************
// 函  数：关闭控制卡，释放系统资源
// 参  数：无
// 返回值：无
// ****************************************************************************************
void __stdcall c8401_board_close(void);


/************************************************************************/
/*                           脉冲模式设置函数                            */
/************************************************************************/

// ****************************************************************************************
// 函  数：设置脉冲输出工作类型
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//				改为：1代表第1轴；2代表第2轴；4代表第3轴；8代表第4轴
//			pulsemode-脉冲输出方式（0 ~ 7）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 默认值：类型4
// 注  意：类型0~3是双脉冲；类型4~7是脉冲+方向。
// ****************************************************************************************
BOOL __stdcall c8401_set_pulse_mode(WORD cardno, WORD axis, WORD pulsemode);


// ****************************************************************************************
// 函  数：设置编码器工作模式
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			pulsemode-编码器输入方式（0：A/B相脉冲，1：上/下脉冲（脉冲/方向））
//			dir-计数方向
//				0：A 超前 B 或 上脉冲输入向上计数
//				   B 超前 A 或 下脉冲输入向下计数
//				1：B 超前 A 或 下脉冲输入向上计数
//				   A 超前 B 或 上脉冲输入向下计数
//			countmode-编码器计数方式（A/B脉冲输入的倍频）
//				0：4倍频（4X A/B）
//				1：2倍频（2X A/B）
//				2：1倍频（1X A/B）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 默认值：A/B相脉冲输入，计数方向是0，计数方式是4倍频
// 注  意：	（1）当上/下脉冲输入时，编码器计数方式是无效的
//			（2）通常，对于编码器应采用A/B相脉冲输入方式。对这种方式，可使用倍频技术提高精度。
//			    如使用的编码器是2500线，即电机旋转一圈反馈的A/B脉冲数都为2500个。让电机旋转一圈，
//				若计数方式是4倍频，则反馈的计数值是10000；若计数方式是2倍频，则反馈的计数值是5000；
//				若计数方式是1倍频，则反馈的计数值是2500。可见，4倍频计数将精度提高了4倍。
// ****************************************************************************************
BOOL __stdcall c8401_set_encoder_mode(WORD cardno, WORD axis, WORD pulsemode, WORD dir, WORD countmode);


/************************************************************************/
/*                           运动速度设置函数                            */
/************************************************************************/

// ****************************************************************************************
// 函  数：设置梯形速度曲线的起始速度、运行速度、加速时间、减速时间
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			sspd-起始速度，单位pps
//			rspd-运行速度，单位pps
//			tacc-加速时间，单位秒
//			tdec-减速时间，单位秒
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）起始速度大于或等于运行速度，则以运行速度做恒速运动。
//			（2）加速时间等于减速时间，则是对称梯形速度曲线，否则是非对称梯形速度曲线。 
// ****************************************************************************************
BOOL __stdcall c8401_set_t_profile(WORD cardno, WORD axis, long sspd, long rspd, double tacc, double tdec);


// ****************************************************************************************
// 函  数：设置梯形速度曲线的起始速度、运行速度、加速距离、减速距离
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			sspd-起始速度，单位pps
//			rspd-运行速度，单位pps
//			pacc-加速距离，单位脉冲
//			pdec-减速距离，单位脉冲
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）起始速度大于或等于运行速度，则以运行速度做恒速运动。
//			（2）加速距离等于减速距离，则是对称梯形速度曲线，否则是非对称梯形速度曲线。 
// ****************************************************************************************
BOOL __stdcall c8401_set_t_profile_ex(WORD cardno, WORD axis, long sspd, long rspd, long pacc, long pdec);


// ****************************************************************************************
// 函  数：设置S形速度曲线的起始速度、运行速度、加速时间、减速时间
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			sspd-起始速度，单位pps
//			rspd-运行速度，单位pps
//			tacc-加速时间，单位秒
//			tdec-减速时间，单位秒
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）起始速度大于或等于运行速度，则以运行速度做恒速运动。
//			（2）加速时间等于减速时间，则是对称S形速度曲线，否则是非对称S形速度曲线。 
// ****************************************************************************************
BOOL __stdcall c8401_set_s_profile(WORD cardno, WORD axis, long sspd, long rspd, double tacc, double tdec);


// ****************************************************************************************
// 函  数：设置S形速度曲线的起始速度、运行速度、加速距离、减速距离
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			sspd-起始速度，单位pps
//			rspd-运行速度，单位pps
//			pacc-加速距离，单位脉冲
//			pdec-减速距离，单位脉冲
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）起始速度大于或等于运行速度，则以运行速度做恒速运动。
//			（2）加速距离等于减速距离，则是对称S形速度曲线，否则是非对称S形速度曲线。 
// ****************************************************************************************
BOOL __stdcall c8401_set_s_profile_ex(WORD cardno, WORD axis, long sspd, long rspd, long pacc, long pdec);


// ****************************************************************************************
// 函  数：设置插补矢量运动的起始速度、运行速度、加速时间、减速时间
// 参  数：	cardno-卡号（从 0 开始计数）
//			sspd-起始速度，单位pps
//			rspd-运行速度，单位pps
//			tacc-加速时间，单位秒
//			tdec-减速时间，单位秒
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）起始速度大于或等于运行速度，则以运行速度做恒速矢量运动。
//			（2）加速时间等于减速时间是对称运动，否则是非对称运动。 
// ****************************************************************************************
BOOL __stdcall c8401_set_vector_profile(WORD cardno, long sspd, long rspd, double tacc, double tdec);


// ****************************************************************************************
// 函  数：改变当前运行速度
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			speed-速度
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：该函数只适用于单轴运动中的变速。
// ****************************************************************************************
BOOL __stdcall c8401_change_speed(WORD cardno, WORD axis, long speed);


// ****************************************************************************************
// 函  数：读取轴的运行速度
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
// 返回值：-1-错误；=0表示运行停止；>0表示运行速度，单位pps
// ****************************************************************************************
long __stdcall c8401_get_speed(WORD cardno, WORD axis);


// ****************************************************************************************
// 函  数：设置缓冲脉冲数
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			pulses-缓冲脉冲数（-32,768 ~ +32,767）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）当控制卡初始化后，默认设置缓冲脉冲数为8。
//			（2）在定长移动中，启动速度非常小，在减速时出现缓慢移动或者未达到启动速度就停止，
//				可修改缓冲脉冲数，缓慢移动则减小缓冲脉冲数，未达启动速度停止则增大缓冲脉冲数。
//			（3）不改变缓冲脉冲数，通过增大启动速度也能解决上述问题。
// ****************************************************************************************
BOOL __stdcall c8401_set_offset_pulse(WORD cardno, WORD axis, int pulses);


/************************************************************************/
/*                           运动停止控制函数                            */
/************************************************************************/

// ****************************************************************************************
// 函  数：轴减速停止
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）指定轴按启动时的速度曲线减速停止。
//			（2）对于恒速运动则立即停止。
// ****************************************************************************************
BOOL __stdcall c8401_dec_stop(WORD cardno, WORD axis);


// ****************************************************************************************
// 函  数：轴立即停止
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	指定轴会立即停止，没有任何减速过程。
// ****************************************************************************************
BOOL __stdcall c8401_imd_stop(WORD cardno, WORD axis);


// ****************************************************************************************
// 函  数：所有轴停止运动
// 参  数：	mode-停止模式（0：减速停止；1：立即停止）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// ****************************************************************************************
BOOL __stdcall c8401_stop_all(WORD mode);


// ****************************************************************************************
// 函  数：stop0（减速）信号的有效/无效和电平停止逻辑设置 
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			enable-使能（0：无效，1：有效）
//			logic-电平停止逻辑（0：低电平停止，1：高电平停止）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 默认值：信号无效，低电平停止
// 注  意：	（1）停止方式取决于是梯形/S形运动还是匀速运动。对梯形/S形运动是减速停止；对匀速运动是立即停止。
//			（2）stop1和stop2信号也是如此。
//			（3）自动回原点时，不必设置stop0、stop1和stop2信号为有效。
// ****************************************************************************************
BOOL __stdcall c8401_set_stop0_signal(WORD cardno, WORD axis, WORD enable, WORD logic);


// ****************************************************************************************
// 函  数：stop1（原点）信号的有效/无效和电平停止逻辑设置 
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			enable-使能（0：无效，1：有效）
//			logic-电平停止逻辑（0：低电平停止，1：高电平停止）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 默认值：信号无效，低电平停止
// ****************************************************************************************
BOOL __stdcall c8401_set_stop1_signal(WORD cardno, WORD axis, WORD enable, WORD logic);


// ****************************************************************************************
// 函  数：stop2（编码器Z相）信号的有效/无效和电平停止逻辑设置 
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			enable-使能（0：无效，1：有效）
//			logic-电平停止逻辑（0：低电平停止，1：高电平停止）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 默认值：信号无效，低电平停止
// ****************************************************************************************
BOOL __stdcall c8401_set_stop2_signal(WORD cardno, WORD axis, WORD enable, WORD logic);


/************************************************************************/
/*                           单轴运动控制函数                            */
/************************************************************************/

// ****************************************************************************************
// 函  数：单轴做梯形速度曲线连续运动
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			dir-运动方向，0：正方向，1：负方向
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）使用此函数前，必须先设置梯形曲线速度。
//			（2）梯形曲线速度是对称的，则做对称梯形速度曲线连续运动。
//			（3）梯形曲线速度是非对称的，则做非对称梯形速度曲线连续运动。
// ****************************************************************************************
BOOL __stdcall c8401_t_cmove(WORD cardno, WORD axis, WORD dir);


// ****************************************************************************************
// 函  数：单轴做S形速度曲线连续运动
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			dir-运动方向，0：正方向，1：负方向
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）使用此函数前，必须先设置S形曲线速度。
//			（2）S形曲线速度是对称的，则做对称S形速度曲线连续运动。
//			（3）S形曲线速度是非对称的，则做非对称S形速度曲线连续运动。
// ****************************************************************************************
BOOL __stdcall c8401_s_cmove(WORD cardno, WORD axis, WORD dir);


// ****************************************************************************************
// 函  数：单轴做梯形速度曲线定长运动
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			dist-定长距离，单位脉冲数（-2,147,483,648 ~ +2,147,483,647）
//			mode-运行模式，0：相对运动，1：绝对运动
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）dist大于零是正方向运动；小于零是负方向运动。
//			（2）使用此函数前，必须先设置梯形曲线速度。
//			（3）梯形曲线速度是对称的，则做对称梯形速度曲线定长运动。
//			（4）梯形曲线速度是非对称的，则做非对称梯形速度曲线定长运动。
// ****************************************************************************************
BOOL __stdcall c8401_t_pmove(WORD cardno, WORD axis, long dist, WORD mode);


// ****************************************************************************************
// 函  数：单轴以S形速度曲线做定长运动
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			dist-定长距离，单位脉冲数（-2,147,483,648 ~ +2,147,483,647）
//			mode-运行模式，0：相对运动，1：绝对运动
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）dist大于零是正方向运动；小于零是负方向运动。
//			（2）使用此函数前，必须先设置S形速度曲线。
//			（3）S形曲线速度是对称的，则做对称S形速度曲线定长运动。
//			（4）S形曲线速度是非对称的，则做非对称S形速度曲线定长运动。
// ****************************************************************************************
BOOL __stdcall c8401_s_pmove(WORD cardno, WORD axis, long dist, WORD mode);


/************************************************************************/
/*                           直线插补函数                                */
/************************************************************************/

// ****************************************************************************************
// 函  数：2轴梯形速度曲线直线插补
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis1-轴1（0-X；1-Y；2-Z；3-U）
//			dist1-定长距离1，单位脉冲数（-2,147,483,646 ~ +2,147,483,646）
//			axis2-轴2（0-X；1-Y；2-Z；3-U）
//			dist2-定长距离2，单位脉冲数（-2,147,483,646 ~ +2,147,483,646）
//			mode-运行模式，0：相对运动，1：绝对运动
//			cinp-连续插补，0：不连续，1：连续
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）轴1是长轴，也是主轴。
//			（2）进行插补的轴必须位于同一块控制卡。
//			（3）使用此函数前，必须先设置插补矢量运动曲线。
//			（4）将 cinp=1，此函数可用于连续插补运动。
//			（5）连续插补运动一般是相对运动。
//			（6）连续插补运动的最后一段必须将 cinp=0。
//			（7）做恒速插补运动时，cinp参数可设置为0或1。
// ****************************************************************************************
BOOL __stdcall c8401_t_line2(WORD cardno, WORD axis1, long dist1, WORD axis2, long dist2, WORD mode, WORD cinp);
//BOOL __stdcall c8401_t_line2(WORD cardno, WORD axis1, long dist1, WORD axis2, long dist2, WORD mode, WORD cinp = 0);

// ****************************************************************************************
// 函  数：2轴S形速度曲线直线插补
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis1-轴1（0-X；1-Y；2-Z；3-U）
//			dist1-定长距离1，单位脉冲数（-2,147,483,646 ~ +2,147,483,646）
//			axis2-轴2（0-X；1-Y；2-Z；3-U）
//			dist2-定长距离2，单位脉冲数（-2,147,483,646 ~ +2,147,483,646）
//			mode-运行模式，0：相对运动，1：绝对运动
//			cinp-连续插补，0：不连续，1：连续
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）轴1是长轴，也是主轴。
//			（2）进行插补的轴必须位于同一块控制卡。
//			（3）使用此函数前，必须先设置插补矢量运动曲线。
//			（4）将 cinp=1，此函数可用于连续插补运动。
//			（5）连续插补运动一般是相对运动。
//			（6）连续插补运动的最后一段必须将 cinp=0。
//			（7）做恒速插补运动时，cinp参数可设置为0或1。
// ****************************************************************************************
BOOL __stdcall c8401_s_line2(WORD cardno, WORD axis1, long dist1, WORD axis2, long dist2, WORD mode, WORD cinp);
//BOOL __stdcall c8401_s_line2(WORD cardno, WORD axis1, long dist1, WORD axis2, long dist2, WORD mode, WORD cinp = 0);

// ****************************************************************************************
// 函  数：3轴梯形速度曲线直线插补
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis1-轴1（0-X；1-Y；2-Z；3-U）
//			dist1-定长距离1，单位脉冲数（-2,147,483,646 ~ +2,147,483,646）
//			axis2-轴2（0-X；1-Y；2-Z；3-U）
//			dist2-定长距离2，单位脉冲数（-2,147,483,646 ~ +2,147,483,646）
//			axis3-轴3（0-X；1-Y；2-Z；3-U）
//			dist3-定长距离3，单位脉冲数（-2,147,483,646 ~ +2,147,483,646）
//			mode-运行模式，0：相对运动，1：绝对运动
//			cinp-连续插补，0：不连续，1：连续
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）轴1是长轴，也是主轴。
//			（2）进行插补的轴必须位于同一块控制卡。
//			（3）使用此函数前，必须先设置插补矢量运动曲线。
//			（4）将 cinp=1，此函数可用于连续插补运动。
//			（5）连续插补运动一般是相对运动。
//			（6）连续插补运动的最后一段必须将 cinp=0。
//			（7）做恒速插补运动时，cinp参数可设置为0或1。
// ****************************************************************************************
BOOL __stdcall c8401_t_line3(WORD cardno, WORD axis1, long dist1, WORD axis2, long dist2, WORD axis3, long dist3, WORD mode, WORD cinp);
//BOOL __stdcall c8401_t_line3(WORD cardno, WORD axis1, long dist1, WORD axis2, long dist2, WORD axis3, long dist3, WORD mode, WORD cinp = 0);

// ****************************************************************************************
// 函  数：3轴S形速度曲线直线插补
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis1-轴1（0-X；1-Y；2-Z；3-U）
//			dist1-定长距离1，单位脉冲数（-2,147,483,646 ~ +2,147,483,646）
//			axis2-轴2（0-X；1-Y；2-Z；3-U）
//			dist2-定长距离2，单位脉冲数（-2,147,483,646 ~ +2,147,483,646）
//			axis3-轴3（0-X；1-Y；2-Z；3-U）
//			dist3-定长距离3，单位脉冲数（-2,147,483,646 ~ +2,147,483,646）
//			mode-运行模式，0：相对运动，1：绝对运动
//			cinp-连续插补，0：不连续，1：连续
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）轴1是长轴，也是主轴。
//			（2）进行插补的轴必须位于同一块控制卡。
//			（3）使用此函数前，必须先设置插补矢量运动曲线。
//			（4）将 cinp=1，此函数可用于连续插补运动。
//			（5）连续插补运动一般是相对运动。
//			（6）连续插补运动的最后一段必须将 cinp=0。
//			（7）做恒速插补运动时，cinp参数可设置为0或1。
// ****************************************************************************************
BOOL __stdcall c8401_s_line3(WORD cardno, WORD axis1, long dist1, WORD axis2, long dist2, WORD axis3, long dist3, WORD mode, WORD cinp);
//BOOL __stdcall c8401_s_line3(WORD cardno, WORD axis1, long dist1, WORD axis2, long dist2, WORD axis3, long dist3, WORD mode, WORD cinp = 0);

/************************************************************************/
/*                           圆弧插补函数                                */
/************************************************************************/

// ****************************************************************************************
// 函  数：两轴相对位置圆弧插补
// 参  数：	cardno-卡号（从 0 开始计数）
//			ax-轴1（0-X；1-Y；2-Z；3-U）
//			ay-轴2（0-X；1-Y；2-Z；3-U）
//			fx_rel-完成点X的相对位置（-2,147,483,646 ~ +2,147,483,646）
//			fy_rel-完成点Y的相对位置（-2,147,483,646 ~ +2,147,483,646）
//			cx_rel-圆心点X的相对位置（-2,147,483,646 ~ +2,147,483,646）
//			cy_rel-圆心点Y的相对位置（-2,147,483,646 ~ +2,147,483,646）
//			dir-圆弧方向，0：顺时针，1：逆时针
//			cinp-连续插补，0：不连续，1：连续
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）轴1是主轴。
//			（2）进行插补的轴必须位于同一块控制卡。
//			（3）使用此函数前，必须先设置插补矢量运动曲线。
//			（4）将 cinp=1，此函数可用于连续插补运动。
//			（5）连续插补运动一般是相对运动。
//			（6）连续插补运动的最后一段必须将 cinp=0。
//			（7）做恒速插补运动时，cinp参数可设置为0或1。
//			（8）将完成点的fx_rel=0，fy_rel=0，则插补成为一个圆。
// ****************************************************************************************
BOOL __stdcall c8401_arc_inp(WORD cardno, WORD ax, WORD ay, long fx_rel, long fy_rel, long cx_rel, long cy_rel, WORD dir, WORD cinp);
//BOOL __stdcall c8401_arc_inp(WORD cardno, WORD ax, WORD ay, long fx_rel, long fy_rel, long cx_rel, long cy_rel, WORD dir, WORD cinp = 0);

// ****************************************************************************************
// 函  数：两轴绝对位置圆弧插补
// 参  数：	cardno-卡号（从 0 开始计数）
//			ax-轴1（0-X；1-Y；2-Z；3-U）
//			ay-轴2（0-X；1-Y；2-Z；3-U）
//			fx_abs-完成点X的绝对位置（-2,147,483,646 ~ +2,147,483,646）
//			fy_abs-完成点Y的绝对位置（-2,147,483,646 ~ +2,147,483,646）
//			cx_abs-圆心点X的绝对位置（-2,147,483,646 ~ +2,147,483,646）
//			cy_abs-圆心点Y的绝对位置（-2,147,483,646 ~ +2,147,483,646）
//			dir-圆弧方向，0：顺时针，1：逆时针
//			cinp-连续插补，0：不连续，1：连续
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）轴1是主轴。
//			（2）进行插补的轴必须位于同一块控制卡。
//			（3）使用此函数前，必须先设置插补矢量运动曲线。
//			（4）将 cinp=1，此函数可用于连续插补运动。
//			（5）连续插补运动一般是相对运动。
//			（6）连续插补运动的最后一段必须将 cinp=0。
//			（7）做恒速插补运动时，cinp参数可设置为0或1。
//			（8）将完成点的位置设置为当前点，则插补成为一个圆。
// ****************************************************************************************
BOOL __stdcall c8401_arc_inp_abs(WORD cardno, WORD ax, WORD ay, long fx_abs, long fy_abs, long cx_abs, long cy_abs, WORD dir, WORD cinp);
//BOOL __stdcall c8401_arc_inp_abs(WORD cardno, WORD ax, WORD ay, long fx_abs, long fy_abs, long cx_abs, long cy_abs, WORD dir, WORD cinp = 0);

/************************************************************************/
/*                           回原点函数                                  */
/************************************************************************/

// ****************************************************************************************
// 函  数：设置单轴回原点模式1
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			s0-sd 减速输入信号有效电平（0：低电平停止；1：高电平停止；-1：无效）
//			s1-home 原点输入信号有效电平（0：低电平停止；1：高电平停止；-1：无效）
//			s2-ez Z相输入信号有效电平（0：低电平停止；1：高电平停止；-1：无效）
//			dir0-接近sd的方向（0：正方向；1：负方向）
//			dir1-接近home的方向（0：正方向；1：负方向）
//			dir2-接近ez的方向（0：正方向；1：负方向）
//			offset_pul-偏移脉冲数（0：不偏移；>0：正方向偏移；<0：负方向偏移）
//			clear-逻辑/实位计数器清零（0：不清零；1：清零）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）在此函数前可设置sd、home和ez信号滤波。
//			（2）s0 无效时，步骤1不执行。
//			（3）s1 无效时，步骤2不执行。
//			（4）s2 无效时，步骤3不执行。
//			（5）默认逻辑/实位计数器清零。
// ****************************************************************************************
BOOL __stdcall c8401_set_home_mode1(WORD cardno, WORD axis, int s0, int s1, int s2, WORD dir0, WORD dir1, WORD dir2, long offset_pul, WORD clear);
//BOOL __stdcall c8401_set_home_mode1(WORD cardno, WORD axis, int s0, int s1, int s2, WORD dir0, WORD dir1, WORD dir2, long offset_pul, WORD clear = 1);

// ****************************************************************************************
// 函  数：设置单轴回原点模式2
// 说  明：将限位信号作为原点信号使用。
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			s0-sd 减速输入信号有效电平（0：低电平停止；1：高电平停止；-1：无效）
//			s1-home 原点输入信号有效电平（0：低电平停止；1：高电平停止；-1：无效）
//			dir0-接近sd的方向（0：正方向；1：负方向）
//			dir1-接近home的方向（0：正方向；1：负方向）
//			offset_pul-偏移脉冲数（0：不偏移；>0：正方向偏移；<0：负方向偏移）
//			clear-逻辑/实位计数器清零（0：不清零；1：清零）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）需要先设置限位信号的有效电平和停止方式。
//			（2）在此函数前可设置sd、home信号滤波。
//			（3）s0 无效时，步骤1不执行。
//			（4）s1 无效时，步骤2不执行。
//			（5）默认逻辑/实位计数器清零。
// ****************************************************************************************
BOOL __stdcall c8401_set_home_mode2(WORD cardno, WORD axis, int s0, int s1, WORD dir0, WORD dir1, long offset_pul, WORD clear);
//BOOL __stdcall c8401_set_home_mode2(WORD cardno, WORD axis, int s0, int s1, WORD dir0, WORD dir1, long offset_pul, WORD clear = 1);

// ****************************************************************************************
// 函  数：单轴回原点
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			search_spd-原点搜索速度，单位pps
//			sspd-梯形曲线起始速度，单位pps
//			rspd-梯形曲线运行速度，单位pps
//			tacc-梯形曲线加速时间，单位秒
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）原点搜索速度search_spd 必须小于 起始速度sspd。
//			（2）在接近减速点阶段，使用对称梯形速度模式（起始速度必须小于运行速度）。
//			（3）回原点前已经禁用软件限位功能。
// ****************************************************************************************
BOOL __stdcall c8401_go_home(WORD cardno, WORD axis, long search_spd, long sspd, long rspd, double tacc);


// ****************************************************************************************
// 函  数：清除自动回原点的错误信息
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// ****************************************************************************************
BOOL __stdcall c8401_clear_home_error(WORD cardno, WORD axis);


/************************************************************************/
/*                           运动状态检测函数                            */
/************************************************************************/

// ****************************************************************************************
// 函  数：获得轴的驱动是否停止
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
// 返回值：	-1：卡号或轴号错误
//			 0：已停止
//			 1：正在驱动
// 注  意：	轴驱动停止后，应检查驱动停止的状态，如限位等。
// ****************************************************************************************
int __stdcall c8401_check_done(WORD cardno, WORD axis);


// ****************************************************************************************
// 函  数：获得轴驱动停止的状态
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
// 返回值：	-1：卡号或轴号错误
//			 0：正常停止或停止命令停止
//			>0：各位的含义如下
//			位0：Stop0（减速信号）
//			位1：Stop1（原点信号）
//			位2：Stop2（编码器Z相信号）
//			位3：IN（锁存信号）
//			位4：正限位
//			位5：负限位
//			位6：伺服报警
//			位7：紧急停止
//			位8：软件正限位（软件限位有效）
//			位9：软件负限位（软件限位有效）
//			位10：Z相信号超前到达（用于回原点）
// 注  意：	轴驱动停止后，应使用本函数检查驱动停止的状态（原因）。
// ****************************************************************************************
int __stdcall c8401_check_status(WORD cardno, WORD axis);


// ****************************************************************************************
// 函  数：获得插补驱动是否停止
// 参  数：	cardno-卡号（从 0 开始计数）
// 返回值：	-1：卡号错误
//			 0：已停止
//			 1：正在插补驱动
// 注  意：	插补驱动停止后，应检查插补驱动停止的状态，如限位等。
// ****************************************************************************************
int __stdcall c8401_inp_done(WORD cardno);


// ****************************************************************************************
// 函  数：是否可以开始下一个连续插补
// 参  数：	cardno-卡号（从 0 开始计数）
// 返回值：	-1：卡号错误
//			 0：不可以
//			 1：可以
// 注  意：	（1）仅用于连续插补运动中，且连续插补前，必须调用此函数。
//			（2）只有当函数返回1（可以），才能开始下一个插补运动。
//			（3）此外，在连续插补前，还应检查各插补轴的状态。
// ****************************************************************************************
int __stdcall c8401_get_inp_ready(WORD cardno);


/************************************************************************/
/*                           驱动器接口信号设置函数                       */
/************************************************************************/

// ****************************************************************************************
// 函  数：设置限位信号工作模式
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			mode-停止模式（0：立即停止，1：减速停止）
//			logic-电平有效逻辑（0：低电平有效，1：高电平有效）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 默认值：立即停止，低电平有效
// 注  意：限位信号不能设置成有效或无效
// ****************************************************************************************
BOOL __stdcall c8401_set_limit_mode(WORD cardno, WORD axis, WORD mode, WORD logic);


// ****************************************************************************************
// 函  数：设置软件限位工作模式
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			enable-使能（0：disable，1：enable）
//			pos_value-正向限位值（-2,147,483,648 ~ +2,147,483,647）
//			neg_value-负向限位值（-2,147,483,648 ~ +2,147,483,647）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）到达软件限位后会减速停止，因此要考虑软件限位值的范围。
//			（2）软件限位会影响回原点的执行，因此要在回原点后，再设置软件限位。
//			（3）可选择逻辑位置或实际位置计数器，缺省是逻辑位置计数器。
//			（4）计数器可变环功能开启后，软件限位功能不能使用。
//			（5）软件限位缺省是无效的。
// ****************************************************************************************
BOOL __stdcall c8401_set_slimit_mode(WORD cardno, WORD axis, WORD enable, long pos_value, long neg_value);


// ****************************************************************************************
// 函  数：设置伺服到位完成信号工作模式
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			enable-使能（0：无效，1：有效）
//			logic-有效电平（0：低电平有效，1：高电平有效）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 默认值：无效，低电平有效
// 注  意：使用步进电机时，请设置成无效。
// ****************************************************************************************
BOOL __stdcall c8401_set_inpos_mode(WORD cardno, WORD axis, WORD enable, WORD logic);


// ****************************************************************************************
// 函  数：设置伺服报警信号工作模式
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			enable-使能（0：无效，1：有效）
//			logic-有效电平（0：低电平有效，1：高电平有效）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 默认值：无效，低电平有效
// 注  意：使用步进电机时，请设置成无效。
// ****************************************************************************************
BOOL __stdcall c8401_set_alarm_mode(WORD cardno, WORD axis, WORD enable, WORD logic);


// ****************************************************************************************
// 函  数：设置计数器环行计数工作模式
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			enable-使能（0：无效，1：有效）
//			max_pos-最大位置
//			min_pos-最小位置
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 默认值：无效
// 注  意：	（1）环行计数功能缺省是无效的。
//			（2）此函数用于轴作旋转运动。
//			（3）可选择逻辑位置或实际位置计数器，缺省是逻辑位置计数器。
//			（4）计数器可变环功能开启后，软件限位功能不能使用。
// ****************************************************************************************
BOOL __stdcall c8401_set_counter_ring_mode(WORD cardno, WORD axis, WORD enable, long max_pos, long min_pos);


/************************************************************************/
/*                           输入信号滤波设置函数                         */
/************************************************************************/

// ****************************************************************************************
// 函  数：设置输入信号滤波功能工作模式
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			index-输入信号类别
//					0：LMT+、LMT-、STOP0、STOP1
//					1：STOP2
//					2：INPOS、ALARM
//					3：IN
//			enable-滤波使能（0：无效，1：有效）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 默认值：无效
// ****************************************************************************************
BOOL __stdcall c8401_set_filter_mode(WORD cardno, WORD axis, WORD index, WORD enable);


// ****************************************************************************************
// 函  数：设置输入信号滤波时间常数
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			index-时间常数（0 ~ 7）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// ****************************************************************************************
BOOL __stdcall c8401_set_filter_time(WORD cardno, WORD axis, WORD index);


/************************************************************************/
/*                           计数器控制函数                            */
/************************************************************************/

// ****************************************************************************************
// 函  数：读取轴的逻辑位置（命令计数器）
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
// 返回值：逻辑位置，单位脉冲
// ****************************************************************************************
long __stdcall c8401_get_position(WORD cardno, WORD axis);


// ****************************************************************************************
// 函  数：设置逻辑位置（命令计数器）
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			pos-逻辑位置（-2,147,483,648 ~ +2,147,483,647）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// ****************************************************************************************
BOOL __stdcall c8401_set_position(WORD cardno, WORD axis, long pos);


// ****************************************************************************************
// 函  数：读取轴的实际位置（实位计数器）
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
// 返回值：实际位置，单位脉冲
// ****************************************************************************************
long __stdcall c8401_get_encoder_pos(WORD cardno, WORD axis);


// ****************************************************************************************
// 函  数：设置实际位置（实位计数器）
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			pos-实际位置（-2,147,483,648 ~ +2,147,483,647）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// ****************************************************************************************
BOOL __stdcall c8401_set_encoder_pos(WORD cardno, WORD axis, long pos);


// ****************************************************************************************
// 函  数：在相对移动中，改变单轴定长运动的目标位置
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			rel_pos-相对目标位置
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// ****************************************************************************************
BOOL __stdcall c8401_change_target_pos(WORD cardno, WORD axis, long rel_pos);


// ****************************************************************************************
// 函  数：选择计数器
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			counter-计数器选择（0：逻辑位置计数器，1：实际位置计数器）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 默认值：逻辑位置计数器。
// ****************************************************************************************
BOOL __stdcall c8401_select_counter(WORD cardno, WORD axis, WORD counter);


/************************************************************************/
/*                       单轴锁存控制函数                                */
/************************************************************************/

// ****************************************************************************************
// 函  数：设置位置锁存工作模式
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			counter-计数器（0：逻辑计数器，1：实位计数器）
//			logic-IN信号电平逻辑（0：低电平锁存，1：高电平锁存）
//			stop-锁存后的停止方式（0：维持原态，1：减速停止，2：立即停止）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）锁存值将是选择的counter计数器的值。
//			（2）必须使用IN信号作为锁存触发输入信号。
// ****************************************************************************************
BOOL __stdcall c8401_set_latch_mode(WORD cardno, WORD axis, WORD counter, WORD logic, WORD stop);


// ****************************************************************************************
// 函  数：设置锁存运动速度曲线
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			curve-速度曲线（0-梯形；1-S形）
//			sspd-起始速度，单位pps
//			rspd-运行速度，单位pps
//			tacc-加速时间，单位秒
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）锁存运动使用对称速度曲线。
//			（2）起始速度大于或等于运行速度，则以运行速度做恒速运动。
// ****************************************************************************************
BOOL __stdcall c8401_set_latch_profile(WORD cardno, WORD axis, WORD curve, long sspd, long rspd, double tacc);


// ****************************************************************************************
// 函  数：轴以连续运动开始锁存
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			dir-移动方向（0：正方向；1：负方向）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// ****************************************************************************************
BOOL __stdcall c8401_latch_cmove(WORD cardno, WORD axis, WORD dir);


// ****************************************************************************************
// 函  数：轴以定长运动开始锁存
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			pulse-移动脉冲数（-2,147,483,648 ~ +2,147,483,647）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// ****************************************************************************************
BOOL __stdcall c8401_latch_pmove(WORD cardno, WORD axis, WORD pulse);


// ****************************************************************************************
// 函  数：获取位置锁存标志
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
// 返回值：	-1：卡号或轴号错误
//			 0：没有锁存
//			 1：已锁存
// 注  意：	只有当本函数返回1（已锁存）后，才能获取锁存的位置值。
// ****************************************************************************************
int __stdcall c8401_get_latch_flag(WORD cardno, WORD axis);


// ****************************************************************************************
// 函  数：获取锁存的位置值
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
// 返回值：锁存的计数器中位置值。
// ****************************************************************************************
long __stdcall c8401_get_latch_value(WORD cardno, WORD axis);


/************************************************************************/
/*                           I/O接口函数                                */
/************************************************************************/

// ****************************************************************************************
// 函  数：读取输出口的状态
// 参  数：	cardno-卡号（从 0 开始计数）
//			index-输出口序号（0~31）
// 返回值：-1-形参错误；0-低电平；1-高电平
// ****************************************************************************************
int __stdcall c8401_read_outbit(WORD cardno, WORD index);


// ****************************************************************************************
// 函  数：读取输入口的状态
// 参  数：	cardno-卡号（从 0 开始计数）
//			index-输入口序号
//				0:X LMT-	1:X LMT+	2:X STOP0	3:X STOP1	4:X STOP2	5:X ALARM
//				6:Y LMT-	7:Y LMT+	8:Y STOP0	9:Y STOP1	10:Y STOP2	11:Y ALARM
//				12:Z LMT-	13:Z LMT+	14:Z STOP0	15:Z STOP1	16:Z STOP2	17:Z ALARM
//				18:U LMT-	19:U LMT+	20:U STOP0	21:U STOP1	22:U STOP2	23:U ALARM
//				24:X IN		25:X INPOS	26:Y IN		27:Y INPOS	28:Z IN		29:Z INPOS
//				30:U IN		31:U INPOS	32:EXPP		33:EXPN		34:EMGN
// 返回值：0-低电平；1-高电平
// ****************************************************************************************
int __stdcall c8401_read_inbit(WORD cardno, WORD index);


// ****************************************************************************************
// 函  数：写入输出口
// 参  数：	cardno-卡号（从 0 开始计数）
//			index-输出口序号（0~31）
//			logic-电平逻辑（0：低电平，1：高电平）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// ****************************************************************************************
BOOL __stdcall c8401_write_outbit(WORD cardno, WORD index, WORD logic);


/************************************************************************/
/*                           同步运动控制函数                            */
/************************************************************************/

// ****************************************************************************************
// 函  数：设置同步运动轴
// 参  数：	cardno-卡号（从 0 开始计数）
//			m_axis-主轴号（0-X；1-Y；2-Z；3-U）
//			s_axis1-从轴号（0-X；1-Y；2-Z；3-U；-1-无）
//			s_axis2-从轴号（0-X；1-Y；2-Z；3-U；-1-无）
//			s_axis3-从轴号（0-X；1-Y；2-Z；3-U；-1-无）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：同步运动的轴在同一块卡上。
// ****************************************************************************************
BOOL __stdcall c8401_set_sync_axes(WORD cardno, WORD m_axis, int s_axis1, int s_axis2, int s_axis3);


// ****************************************************************************************
// 函  数：设置同步运动速度曲线
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			curve-速度曲线（0-梯形；1-S形）
//			sspd-起始速度，单位pps
//			rspd-运行速度，单位pps
//			tacc-加速时间，单位秒
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）同步运动使用对称速度曲线。
//			（2）起始速度大于或等于运行速度，则以运行速度做恒速运动。
// ****************************************************************************************
BOOL __stdcall c8401_set_sync_profile(WORD cardno, WORD axis, WORD curve, long sspd, long rspd, double tacc);


// ****************************************************************************************
// 函  数：设置从轴同步事件
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			action-事件，下面列出事件：
//				0：清除同步事件
//				1：定长移动
//				2：连续移动
//				3：停止
//			action_data-事件数据值，下面列出依据事件的数据值：
//				事件	|  数据值
//				 1	|	定长移动脉冲数
//				 2	|	0：正方向；1：负方向
//				 3	|	0：减速停止；1：立即停止
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	从轴缺省无同步事件。
// ****************************************************************************************
BOOL __stdcall c8401_set_sync_action(WORD cardno, WORD axis, WORD action, long action_data);


// ****************************************************************************************
// 函  数：设置主轴同步触发条件
// 参  数：	cardno-卡号（从 0 开始计数）
//			m_axis-主轴号（0-X；1-Y；2-Z；3-U）
//			factor-触发条件，下面列出：
//				0：清除触发条件
//				1：Counter >= Comp+ 触发 (逻辑或实位计数器的值 >= 比较器+的值)
//				2：Counter < Comp+ 触发 (逻辑或实位计数器的值 < 比较器+的值)
//				3：Counter < Comp- 触发 (逻辑或实位计数器的值 < 比较器-的值)
//				4：Counter >= Comp- 触发 (逻辑或实位计数器的值 >= 比较器-的值)
//				5：驱动触发
//				6：IN 输入信号电平触发
//			factor_data-触发条件数据值，下面列出依据触发条件的触发数据值：
//				触发	|  数据值(factor_data)
//				 1	|	Comp+的值
//				 2	|	Comp+的值
//				 3	|	Comp-的值
//				 4	|	Comp-的值
//				 5	|	0：驱动开始触发，1：驱动停止触发
//				 6	|	0：低电平触发，1：高电平触发
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）该函数设置主轴的触发条件。
//			（2）使用触发条件1-4之前，需调用c8401_select_counter函数，选择逻辑或实位计数器。
//			（3）使用触发条件1-4时，不能使用软件限位和计数器环行计数功能。
// ****************************************************************************************
BOOL __stdcall c8401_set_sync_factor(WORD cardno, WORD m_axis, WORD factor, long factor_data);


// ****************************************************************************************
// 函  数：同步运动开始前，主轴定长运动
// 参  数：	cardno-卡号（从 0 开始计数）
//			m_axis-主轴号（0-X；1-Y；2-Z；3-U）
//			pulse-主轴移动脉冲数（-2,147,483,648 ~ +2,147,483,647）
//			action-主轴同步事件，下面列出事件：
//				0：无事件，维持原状态
//				1：停止
//			action_data-事件数据值，下面列出依据事件的数据值：
//				事件	|  数据值
//				 1	|	0：减速停止；1：立即停止
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）该函数是同步运动前，主轴开始定长运动。
//			（2）主轴开始定长运动后，当同步条件触发后，主轴和从轴执行同步事件。
// ****************************************************************************************
BOOL __stdcall c8401_sync_master_pmove(WORD cardno, WORD m_axis, long pulse, WORD action, long action_data);


// ****************************************************************************************
// 函  数：同步运动开始前，从轴定长运动
// 参  数：	cardno-卡号（从 0 开始计数）
//			s_axis-从轴号（0-X；1-Y；2-Z；3-U）
//			pulse-从轴移动脉冲数（-2,147,483,648 ~ +2,147,483,647）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）当从轴的同步事件是停止时，在同步条件触发前，调用此函数使从轴运动。
// ****************************************************************************************
BOOL __stdcall c8401_sync_slave_pmove(WORD cardno, WORD s_axis, long pulse);


// ****************************************************************************************
// 函  数：同步运动开始前，从轴连续运动
// 参  数：	cardno-卡号（从 0 开始计数）
//			s_axis-从轴号（0-X；1-Y；2-Z；3-U）
//			dir-从轴移动方向（0：正方向；1：负方向）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）当从轴的同步事件是停止时，在同步条件触发前，调用此函数使从轴运动。
// ****************************************************************************************
BOOL __stdcall c8401_sync_slave_cmove(WORD cardno, WORD s_axis, WORD dir);


// ****************************************************************************************
// 函  数：同步运动复位
// 参  数：	cardno-卡号（从 0 开始计数）
//			m_axis-主轴号（0-X；1-Y；2-Z；3-U）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）同步运动结束后，必须使用该函数复位同步运动。
//			（2）只需复位同步运动中的主轴。
// ****************************************************************************************
BOOL __stdcall c8401_sync_reset(WORD cardno, WORD m_axis);



/************************************************************************/
/*                           手动驱动控制函数                            */
/************************************************************************/


// ****************************************************************************************
// 函  数：设置手轮运动
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			frq-最大脉冲输入频率，单位pps（Hz）
//			pulse-轴运动脉冲数
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	（1）手轮A相信号接入EXPP，手轮B相信号接入EXPM。
//			（2）当EXPP信号是上升沿，且EXPM信号是低电平时，轴正向运动。
//			（3）当EXPP信号是下降沿，且EXPM信号是低电平时，轴负向运动。
//			（4）frq是手轮的最大工作频率。
//			（5）在前后2个EXPP信号上升沿/下降沿间，轴正向/负向运动pulse个脉冲。
// ****************************************************************************************
BOOL __stdcall c8401_handwheel_move(WORD cardno, WORD axis, double frq, long pulse);


// ****************************************************************************************
// 函  数：设置手柄运动
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意	（1）当EXPP信号是下降沿，轴正向运动；EXPP从低电平变为高电平时，轴停止运动。
//			（2）当EXPM信号是下降沿，轴负向运动；EXPM从低电平变为高电平时，轴停止运动。
//			（3）梯形速度曲线是减速停止；恒速是立即停止。
//			（4）调用本函数前，需先设置好速度曲线。
// ****************************************************************************************
BOOL __stdcall c8401_joystick_move(WORD cardno, WORD axis);


// ****************************************************************************************
// 函  数：设置触发定长运动
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
//			pulse-轴运动脉冲数
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意	（1）当EXPP信号是下降沿，轴正向定长运动pulse个脉冲。
//			（2）当EXPM信号是下降沿，轴负向定长运动pulse个脉冲。
//			（3）直到定长运动结束后，EXPP/EXPM信号是下降沿时，才触发新的定长运动。
//			（4）调用本函数前，需先设置好速度曲线。
// ****************************************************************************************
BOOL __stdcall c8401_triggle_move(WORD cardno, WORD axis, long pulse);


// ****************************************************************************************
// 函  数：禁用手动运动控制功能
// 参  数：	cardno-卡号（从 0 开始计数）
//			axis-轴号（0-X；1-Y；2-Z；3-U）
// 返回值：TRUE(1)-正确；FALSE(0)-错误
// 注  意：	使用该函数后，即使有手动驱动信号，轴不会运动。
// ****************************************************************************************
BOOL __stdcall c8401_manual_disable(WORD cardno, WORD axis);


#endif 
